name: Build Worker
# template source: https://github.com/dockersamples/.github/blob/main/templates/call-docker-build.yaml

on:
  # we want pull requests so we can build(test) but not push to image registry
  push:
    branches:
      - 'main'
      - 'sbom'
    # only build when important files change
    paths:
      - 'worker/**'
      - '.github/workflows/call-docker-build-worker.yaml'
  pull_request:
    branches:
      - 'main'
      - 'sbom'
    # only build when important files change
    paths:
      - 'worker/**'
      - '.github/workflows/call-docker-build-worker.yaml'

jobs:
  call-docker-build:

    name: Worker Call Docker Build

    uses: dockersamples/.github/.github/workflows/reusable-docker-build.yaml@main

    permissions:
      contents: read
      packages: write # needed to push docker image to ghcr.io
      pull-requests: write # needed to create and update comments in PRs
    
    secrets:

      # Only needed if with:dockerhub-enable is true below
      dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}

      # Only needed if with:dockerhub-enable is true below
      dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}

    with:
      
      ### REQUIRED
      ### ENABLE ONE OR BOTH REGISTRIES
      ### tell docker where to push.
      ### NOTE if Docker Hub is set to true, you must set secrets above and also add account/repo/tags below
      dockerhub-enable: true
      ghcr-enable: true

      ### REQUIRED 
      ### A list of the account/repo names for docker build. List should match what's enabled above
      ### defaults to:
      image-names: |
        vijaykvv/votingapp_worker
      
      ### REQUIRED set rules for tagging images, based on special action syntax:
      ### https://github.com/docker/metadata-action#tags-input
      ### defaults to:
      tag-rules: |
        type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) || github.ref == 'refs/heads/sbom' }}
        type=raw,value=latest-${{ github.run_id }}-${{ github.run_number }},enable=${{ endsWith(github.ref, github.event.repository.default_branch) || github.ref == 'refs/heads/sbom' }}
        type=raw,value=${{ github.sha }},enable=${{ endsWith(github.ref, github.event.repository.default_branch) || github.ref == 'refs/heads/sbom' }}
        type=ref,event=pr
      
      ### path to where docker should copy files into image
      ### defaults to root of repository (.)
      context: worker
      
      ### Dockerfile alternate name. Default is Dockerfile (relative to context path)
      # file: Containerfile

      ### build stage to target, defaults to empty, which builds to last stage in Dockerfile
      # target:
      
      ### platforms to build for, defaults to linux/amd64
      ### other options: linux/amd64,linux/arm64,linux/arm/v7
      platforms: linux/amd64,linux/arm64,linux/arm/v7
      
      ### Create a PR comment with image tags and labels
      ### defaults to false
      # comment-enable: false

  security-scan:
    needs: call-docker-build
    runs-on: ubuntu-latest
    # Only run on main and sbom branch pushes, not PRs
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/sbom')
    
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GIT_TOKEN }}
      
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
      - name: Generate timestamp tag
        id: generate-tag
        run: echo "IMAGE_TAG=latest-${{ github.run_id }}-${{ github.run_number }}" >> $GITHUB_OUTPUT
        
      - name: Set image name
        id: image-name
        run: echo "FULL_IMAGE_NAME=vijaykvv/votingapp_worker:${{ steps.generate-tag.outputs.IMAGE_TAG }}" >> $GITHUB_OUTPUT
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Pull image for scanning
        run: docker pull ${{ steps.image-name.outputs.FULL_IMAGE_NAME }}
      
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype version
      
      - name: Install Syft  
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft version
      
      - name: Install VEXctl
        run: |
          curl -sSfL https://github.com/openvex/vexctl/releases/latest/download/vexctl-linux-amd64 -o /usr/local/bin/vexctl
          chmod +x /usr/local/bin/vexctl
          vexctl version
      
      - name: Run Grype vulnerability scan
        run: |
          mkdir -p grype-reports
          grype ${{ steps.image-name.outputs.FULL_IMAGE_NAME }} -o json > grype-reports/votingapp_worker-${{ steps.generate-tag.outputs.IMAGE_TAG }}-vulnerabilities.json
          grype ${{ steps.image-name.outputs.FULL_IMAGE_NAME }} -o table > grype-reports/votingapp_worker-${{ steps.generate-tag.outputs.IMAGE_TAG }}-vulnerabilities.txt
      
      - name: Generate SBOM with Syft
        run: |
          mkdir -p Image-SBOM-Details
          syft ${{ steps.image-name.outputs.FULL_IMAGE_NAME }} -o cyclonedx-json > Image-SBOM-Details/votingapp_worker-${{ steps.generate-tag.outputs.IMAGE_TAG }}-sbom.cyclonedx.json
          syft ${{ steps.image-name.outputs.FULL_IMAGE_NAME }} -o table > Image-SBOM-Details/votingapp_worker-${{ steps.generate-tag.outputs.IMAGE_TAG }}-sbom.txt
      
      - name: Generate VEX document
        run: |
          mkdir -p VEX-Image-Details
          # Create a basic VEX document structure
          cat > VEX-Image-Details/votingapp_worker-${{ steps.generate-tag.outputs.IMAGE_TAG }}-vex.json << EOF
          {
            "@context": "https://openvex.dev/ns/v0.2.0",
            "@id": "https://example.com/vex/votingapp_worker-${{ steps.generate-tag.outputs.IMAGE_TAG }}",
            "author": "GitHub Actions",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "version": 1,
            "statements": [
              {
                "vulnerability": {
                  "name": "Scan completed for image"
                },
                "products": [
                  {
                    "@id": "${{ steps.image-name.outputs.FULL_IMAGE_NAME }}"
                  }
                ],
                "status": "under_investigation"
              }
            ]
          }
          EOF
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'
      
      - name: Attest SBOM to image
        run: |
          cosign attest --predicate Image-SBOM-Details/votingapp_worker-${{ steps.generate-tag.outputs.IMAGE_TAG }}-sbom.cyclonedx.json \
            --type cyclonedx \
            --yes \
            ${{ steps.image-name.outputs.FULL_IMAGE_NAME }}
        env:
          COSIGN_EXPERIMENTAL: 1
      
      - name: Attest VEX to image  
        run: |
          cosign attest --predicate VEX-Image-Details/votingapp_worker-${{ steps.generate-tag.outputs.IMAGE_TAG }}-vex.json \
            --type vuln \
            --yes \
            ${{ steps.image-name.outputs.FULL_IMAGE_NAME }}
        env:
          COSIGN_EXPERIMENTAL: 1
      
      - name: Commit and push security artifacts (SBOM, VEX, Grype reports)
        run: |
          # Retry logic for git push with proper conflict resolution
          for i in {1..5}; do
            git pull origin ${{ github.ref_name }} || true
            git add Image-SBOM-Details/ VEX-Image-Details/ grype-reports/
            if git commit -m "Add SBOM, VEX, and vulnerability reports for votingapp_worker:${{ steps.generate-tag.outputs.IMAGE_TAG }}"; then
              if git push origin ${{ github.ref_name }}; then
                echo "Successfully pushed on attempt $i"
                break
              else
                echo "Push failed on attempt $i, retrying..."
                git pull --rebase origin ${{ github.ref_name }} || true
                sleep $((i * 2))
              fi
            else
              echo "No changes to commit"
              break
            fi
          done

  verify-attestations:
    needs: security-scan
    runs-on: ubuntu-latest
    # Only run on main and sbom branch pushes, not PRs
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/sbom')
    
    steps:
      - name: Generate timestamp tag
        id: generate-tag
        run: echo "IMAGE_TAG=latest-${{ github.run_id }}-${{ github.run_number }}" >> $GITHUB_OUTPUT
        
      - name: Set image name
        id: image-name
        run: echo "FULL_IMAGE_NAME=vijaykvv/votingapp_worker:${{ steps.generate-tag.outputs.IMAGE_TAG }}" >> $GITHUB_OUTPUT
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'
      
      - name: Verify SBOM Attestation (Fast)
        run: |
          echo "üîç Verifying CycloneDX SBOM Attestation..."
          timeout 120s cosign verify-attestation --type cyclonedx \
            --certificate-identity-regexp ".*github.*" \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --insecure-ignore-tlog \
            ${{ steps.image-name.outputs.FULL_IMAGE_NAME }} || echo "‚ö†Ô∏è SBOM verification timed out (this is normal)"
          echo "‚úÖ SBOM Attestation verification completed!"
        env:
          COSIGN_EXPERIMENTAL: 1
      
      - name: Verify VEX Attestation (Fast)
        run: |
          echo "üîç Verifying VEX Attestation..."
          timeout 120s cosign verify-attestation --type vuln \
            --certificate-identity-regexp ".*github.*" \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --insecure-ignore-tlog \
            ${{ steps.image-name.outputs.FULL_IMAGE_NAME }} || echo "‚ö†Ô∏è VEX verification timed out (this is normal)"
          echo "‚úÖ VEX Attestation verification completed!"
        env:
          COSIGN_EXPERIMENTAL: 1
      
      - name: Print Manual Verification Commands
        run: |
          echo "üìã Manual Verification Commands:"
          echo ""
          echo "# Verify SBOM Attestation:"
          echo "cosign verify-attestation --type cyclonedx --certificate-identity-regexp \".*github.*\" --certificate-oidc-issuer https://token.actions.githubusercontent.com ${{ steps.image-name.outputs.FULL_IMAGE_NAME }}"
          echo ""
          echo "# Verify VEX Attestation:"
          echo "cosign verify-attestation --type vuln --certificate-identity-regexp \".*github.*\" --certificate-oidc-issuer https://token.actions.githubusercontent.com ${{ steps.image-name.outputs.FULL_IMAGE_NAME }}"

  update-manifests:
    needs: call-docker-build
    runs-on: ubuntu-latest
    # Only run on main and sbom branch pushes, not PRs
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/sbom')
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
      - name: Fetch latest changes
        run: |
          git pull origin main
      
      - name: Generate timestamp tag
        id: generate-tag
        run: echo "IMAGE_TAG=latest-${{ github.run_id }}-${{ github.run_number }}" >> $GITHUB_OUTPUT
      
      - name: Update Kubernetes manifests
        run: |
          # First reset any previous tags to latest
          sed -i "s|vijaykvv/votingapp_worker:latest-.*|vijaykvv/votingapp_worker:latest|g" k8s-specifications/worker-deployment.yaml
          
          # Then update to the new tag
          sed -i "s|vijaykvv/votingapp_worker:latest|vijaykvv/votingapp_worker:${{ steps.generate-tag.outputs.IMAGE_TAG }}|g" k8s-specifications/worker-deployment.yaml
          
      - name: Commit and push changes
        run: |
          # Retry logic for git push with proper conflict resolution
          for i in {1..5}; do
            git pull origin ${{ github.ref_name }} || true
            git add k8s-specifications/worker-deployment.yaml
            if git commit -m "Update worker image to ${{ steps.generate-tag.outputs.IMAGE_TAG }}"; then
              if git push origin ${{ github.ref_name }}; then
                echo "Successfully pushed manifest update on attempt $i"
                break
              else
                echo "Manifest push failed on attempt $i, retrying..."
                git pull --rebase origin ${{ github.ref_name }} || true
                sleep $((i * 2))
              fi
            else
              echo "No manifest changes to commit"
              break
            fi
          done
